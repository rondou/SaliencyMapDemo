//
//  PrefixHeader.pch
//  autoCutPicture
//
//  Created by rondou.chen on 2015/6/3.
//  Copyright (c) 2015å¹´ rondou chen. All rights reserved.
//

#ifndef autoCutPicture_PrefixHeader_pch
#define autoCutPicture_PrefixHeader_pch

// Include any system framework and library headers here that should be included in all compilation units.
// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.

typedef struct {
    int rank;
    int p;
    int size;
} uni_elt;

class universe {
public:
    universe(int elements);
    ~universe();
    int find(int x);
    void join(int x, int y);
    int size(int x) const { return elts[x].size; }
    int nu_sets() const { return num; }
    
private:
    uni_elt *elts;
    int num;
};

universe::universe(int elements) {
    elts = new uni_elt[elements];
    num = elements;
    for (int i = 0; i < elements; i++) {
        elts[i].rank = 0;
        elts[i].size = 1;
        elts[i].p = i;
    }
}

universe::~universe() {
    delete [] elts;
}

int universe::find(int x) {
    int y = x;
    while (y != elts[y].p)
        y = elts[y].p;
    elts[x].p = y;
    return y;
}

void universe::join(int x, int y) {
    if (elts[x].rank > elts[y].rank) {
        elts[y].p = x;
        elts[x].size += elts[y].size;
    } else {
        elts[x].p = y;
        elts[y].size += elts[x].size;
        if (elts[x].rank == elts[y].rank)
            elts[y].rank++;
    }
    num--;
}

#endif
